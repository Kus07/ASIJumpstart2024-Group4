@model ASI.Basecode.Services.ServiceModels.ViewTicketModel

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";

    var prevAgentId = 0;
    var reassigned = false;
}

<br />
<br />
<br />
<br />
<style>
    @@import url("https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Oswald&display=swap");

    .message-header {
        display: flex;
        justify-content: space-between;
        font-size: 0.9em;
        color: #666;
        margin-bottom: 5px;
    }

    .message-body {
        font-size: 1.1em;
        color: #333;
    }

    .sender {
        font-weight: bold;
    }

    .timestamp {
        font-style: italic;
    }

    .loader-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent white background */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Ensure it's on top of everything */
    }

    body {
        align-items: center;
        min-height: 100vh;
        text-transform: uppercase;
        --black: rgba(48, 39, 24, 0.8);
        --beige: #fff2c6;
        --mustard: #f7d337;
        --border: 4px solid var(--black);
        color: var(--black);
    }

    .ticket {
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        width: 100%;
        max-width: 800px;
        margin: 20px auto;
        background-color: #fff;
        border: 2px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .attachment-img {
        max-width: 300px;
        max-height: 300px;
        margin-top: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .ticket-stub {
        background-color: #2e3f63;
        text-align: center;
        padding: 15px;
        border-radius: 50px;
        font-family: "Alfa Slab One", sans-serif;
        margin-bottom: 20px;
    }

        .ticket-stub h2 {
            font-size: 1.3em;
            color: #fff;
        }

    .ticket-body {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
    }

    .detail-item {
        padding: 10px;
        background-color: #f9f9f9;
        border: 1px solid #eaeaea;
        border-radius: 5px;
        text-align: left;
    }

        .detail-item h3 {
            font-size: 1.1em;
            color: #0f0f0f;
            margin-bottom: 5px;
        }

        .detail-item p {
            font-size: 1.2em;
            color: #666;
        }

    .send-message-btn {
        grid-column: span 2;
        display: block;
        width: 100%;
        padding: 12px;
        margin-top: 20px;
        background-color: #007bff;
        color: #fff;
        font-size: 1.2em;
        text-align: center;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }


        .send-message-btn:hover {
            background-color: #0056b3;
        }

    /* Modal Styling */
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 60%;
        border-radius: 10px;
    }

    .message-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .message {
        padding: 10px;
        border-radius: 10px;
        max-width: 80%;
    }

    .sent {
        align-self: flex-end;
        background-color: #6c96c7;
        color: white;
    }

    .received {
        align-self: flex-start;
        background-color: #eaeaea;
    }

    .input-area {
        display: flex;
        gap: 10px;
    }

        .input-area input {
            flex: 1;
            padding: 10px;
            font-size: 1em;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .input-area button {
            padding: 10px 15px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .input-area button:hover {
                background-color: #218838;
            }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .reassign-section {
        margin-top: 20px;
    }

        .reassign-section label {
            font-size: 1.2em;
            color: #333;
            margin-bottom: 10px;
            display: block;
        }

        .reassign-section select {
            width: 100%;
            padding: 10px;
            font-size: 1.1em;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .reassign-section button {
            margin-top: 10px;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .reassign-section button:hover {
                background-color: #0056b3;
            }
</style>



<div class="ticket">
    <!-- Ticket Stub -->
    <div class="ticket-stub">
        <h3 style="color: darkgray;">Ticket #@Model.Ticket.Id</h3>
        <h2>Description: @Model.Ticket.Description</h2>
    </div>

    <!-- Ticket Body -->
    <div class="ticket-body">
        <div class="detail-item">
            <h3>Customer</h3>
            <p>@Model.Customer</p>
        </div>
        <div class="detail-item">
            <h3>Agent</h3>
            <p>@Model.Agent</p>
        </div>
        <div class="detail-item">
            <h3>Category</h3>
            <p>@Model.Ticket.Category.CategoryName</p>
        </div>
        <div class="detail-item">
            <h3>Priority</h3>
            <p>@Model.Ticket.Priority</p>
        </div>
        <div class="detail-item">
            <h3>Status</h3>
            <p>@Model.Ticket.Status.StatusName</p>
        </div>
        <div class="detail-item">
            <h3>Time Submitted</h3>
            <p>@Model.Ticket.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</p>
        </div>
        <div class="detail-item">
            <h3>Last Updated</h3>
            <p>@Model.Ticket.UpdatedAt?.ToString("dd MMM yyyy, hh:mm tt")</p>
        </div>

        <button class="send-message-btn">View Details</button>
    </div>
</div>

<!-- Modal -->
<div id="myModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Ticket Description</h2>
        <p>@Model.Ticket.Description</p>
        @if (!string.IsNullOrEmpty(Model.Ticket.Attachments))
        {
            <div class="attachment">
                <img src="~/@Url.Content(Model.Ticket.Attachments)" alt="attachment" class="attachment-img" />
            </div>
        }
        <h3>Conversation</h3>


        <!-- Message Container -->
        <div class="message-container">
            @if (Model.Messages.Count == 0)
            {
                <div id="noConversation" class="alert alert-info text-center">No conversation yet! Send one now</div>
            }

            @foreach (var message in Model.Messages)
            {
                var isCurrentUser = User.FindFirst("UserId")?.Value == message.UserId.ToString();
                var isCurrentAgent = User.FindFirst("UserId")?.Value == Model.TicketAssigned.AgentId.ToString();
                var displayName = "";

                //Agent
                if (User.IsInRole("2"))
                {
                    displayName = isCurrentUser ? "You (Agent)" : Model.Customer;
                    if (message.User.RoleId == 2)
                    {

                        <div class="message sent">
                            <div class="message-header">
                                @if (isCurrentUser)
                                {
                                    <span class="sender">@displayName</span>

                                }
                                else
                                {
                                    <span class="sender">@message.User.Username</span>
                                }
                                <span class="timestamp">@message.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</span>
                            </div>
                            <div class="message-body">
                                @message.Message
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="message @(isCurrentUser ? "sent" : "received")">
                            <div class="message-header">
                                <span class="sender">@displayName</span>
                                <span class="timestamp">@message.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</span>
                            </div>
                            <div class="message-body">
                                @message.Message
                            </div>
                        </div>
                    }
                    if (message.User.RoleId == 2 && !isCurrentUser)
                    {

                        <p align="center">--- Reassigned To @Model.TicketAssigned.Agent.Username ---</p>
                    }
                }

                //Customer
                else
                {
                    displayName = isCurrentUser ? "You (Customer)" : Model.Agent;

                    if (message.User.RoleId == 2)
                    {
                        <div class="message received">
                            <div class="message-header">
                                @if (isCurrentUser)
                                {
                                    <span class="sender">@displayName</span>

                                }
                                else
                                {
                                    <span class="sender">@message.User.Username</span>
                                }
                                <span class="timestamp">@message.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</span>
                            </div>
                            <div class="message-body">
                                @message.Message
                            </div>
                        </div>
                    }
                    else 
                    {
                        <div class="message @(isCurrentUser ? "sent" : "received")">
                            <div class="message-header">
                                <span class="sender">@displayName</span>
                                <span class="timestamp">@message.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</span>
                            </div>
                            <div class="message-body">
                                @message.Message
                            </div>
                        </div>
                    }
                    if (message.User.RoleId == 2 && prevAgentId != message.UserId && !reassigned)
                    {
                        <p align="center">--- Reassigned To @Model.TicketAssigned.Agent.Username ---</p>
                        reassigned = true;
                    }

                    prevAgentId = message.UserId ?? 0;

                }

                
                
                
            }
        </div>


        @if (User.IsInRole("2"))
        {
            <div class="reassign-section">
                <form asp-action="ReassignTicket" method="post">
                    <label for="agentSelect">Reassign Ticket to Agent:</label>
                    <select id="agentSelect" name="newAgent">
                        @foreach (var agent in Model.Agents)
                        {
                            <option value="@agent.Id">@agent.Username - @agent.Department.DepartmentName</option>
                        }
                    </select>
                    <input type="hidden" name="ticketId" value="@Model.Ticket.Id" />
                    <button type="submit">Reassign</button>
                </form>
            </div>
        }

        <br />

        <!-- Input Area -->
        <div class="input-area">
            <input type="hidden" id="ticketId" value="@Model.Ticket.Id" />
            <input type="text" id="messageInput" placeholder="Type your message..." onkeydown="handleKeyDown(event)">
            <button onclick="sendMessage()" class="btn btn-primary">Send</button>
        </div>
    </div>
</div>



<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    var modal = document.getElementById("myModal");
    var btn = document.querySelector(".send-message-btn");
    var span = document.getElementsByClassName("close")[0];

    btn.onclick = function () {
        modal.style.display = "block";
    }

    span.onclick = function () {
        modal.style.display = "none";
    }

    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    function handleKeyDown(event) {
        if (event.key === 'Enter') {
            event.preventDefault(); // Prevent default behavior (form submission)
            sendMessage();
        }
    }

    function sendMessage() {
        var input = document.getElementById("messageInput");
        var message = input.value.trim();
        var ticketId = @Model.Ticket.Id; // Ensure this is rendered correctly in Razor
        var sendButton = document.querySelector('.input-area button');
        var noMessageAlert = document.getElementById('noConversation');

        // Proceed only if the message is not empty
        if (message !== "") {
            // Show the loader
            sendButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...';
            sendButton.disabled = true;

            // Send the message via AJAX
            $.ajax({
                url: '/Ticket/SendMessage',
                type: 'POST',
                data: { ticketId: ticketId, message: message },
                success: function (response) {
                    if (response.success) {
                        // If there's no previous message, hide the no message alert
                        if (noMessageAlert) {
                            noMessageAlert.style.display = "none";
                        }

                        // Create the new message element
                        var messageContainer = document.querySelector(".message-container");
                        var newMessage = createMessageElement("You", message);

                        // Append the new message to the message container
                        messageContainer.appendChild(newMessage);

                        // Scroll to the bottom of the message container
                        messageContainer.scrollTop = messageContainer.scrollHeight;

                        // Clear the input field
                        input.value = "";
                    } else {
                        toastr.error(response.responseText);
                    }
                },
                error: function () {
                    alert("Error sending message.");
                },
                complete: function () {
                    // Reset the send button
                    sendButton.innerHTML = 'Send';
                    sendButton.disabled = false;
                }
            });
        } else {
            alert('Please enter a message before sending.');
        }
    }

    // Helper function to create message element
    function createMessageElement(senderName, messageContent) {
        var message = document.createElement("div");
        message.classList.add("message", "sent");

        // Create the message header
        var messageHeader = document.createElement("div");
        messageHeader.classList.add("message-header");

        var sender = document.createElement("span");
        sender.classList.add("sender");
        sender.textContent = senderName;

        var timestamp = document.createElement("span");
        timestamp.classList.add("timestamp");
        var currentTimestamp = new Date().toLocaleString('en-US', {
            day: '2-digit', month: 'short', year: 'numeric',
            hour: '2-digit', minute: '2-digit'
        });
        timestamp.textContent = currentTimestamp;

        messageHeader.appendChild(sender);
        messageHeader.appendChild(timestamp);

        // Create the message body
        var messageBody = document.createElement("div");
        messageBody.classList.add("message-body");
        messageBody.textContent = messageContent;

        // Append header and body to the message
        message.appendChild(messageHeader);
        message.appendChild(messageBody);

        return message;
    }



</script>

