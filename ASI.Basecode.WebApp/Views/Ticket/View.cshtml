@model ASI.Basecode.Services.ServiceModels.ViewTicketModel

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

<br />
<br />
<br />
<br />
<style>
    @@import url("https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Oswald&display=swap");

    body {
        align-items: center;
        min-height: 100vh;
        text-transform: uppercase;
        --black: rgba(48, 39, 24, 0.8);
        --beige: #fff2c6;
        --mustard: #f7d337;
        --border: 4px solid var(--black);
        color: var(--black);
    }

    .ticket {
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        width: 100%;
        max-width: 800px;
        margin: 20px auto;
        background-color: #fff;
        border: 2px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .ticket-stub {
        background-color: #2e3f63;
        text-align: center;
        padding: 15px;
        border-radius: 50px;
        font-family: "Alfa Slab One", sans-serif;
        margin-bottom: 20px;
    }

        .ticket-stub h1 {
            font-size: 2em;
            color: #fff;
        }

    .ticket-body {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
    }

    .detail-item {
        padding: 10px;
        background-color: #f9f9f9;
        border: 1px solid #eaeaea;
        border-radius: 5px;
        text-align: left;
    }

        .detail-item h3 {
            font-size: 1.1em;
            color: #0f0f0f;
            margin-bottom: 5px;
        }

        .detail-item p {
            font-size: 1.2em;
            color: #666;
        }

    .send-message-btn {
        grid-column: span 2;
        display: block;
        width: 100%;
        padding: 12px;
        margin-top: 20px;
        background-color: #007bff;
        color: #fff;
        font-size: 1.2em;
        text-align: center;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .send-message-btn:hover {
            background-color: #0056b3;
        }

    /* Modal Styling */
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 60%;
        border-radius: 10px;
    }

    .message-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .message {
        padding: 10px;
        border-radius: 10px;
        max-width: 80%;
    }

    .sent {
        align-self: flex-end;
        background-color: #007bff;
        color: white;
    }

    .received {
        align-self: flex-start;
        background-color: #eaeaea;
    }

    .input-area {
        display: flex;
        gap: 10px;
    }

        .input-area input {
            flex: 1;
            padding: 10px;
            font-size: 1em;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .input-area button {
            padding: 10px 15px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .input-area button:hover {
                background-color: #218838;
            }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .reassign-section {
        margin-top: 20px;
    }

        .reassign-section label {
            font-size: 1.2em;
            color: #333;
            margin-bottom: 10px;
            display: block;
        }

        .reassign-section select {
            width: 100%;
            padding: 10px;
            font-size: 1.1em;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .reassign-section button {
            margin-top: 10px;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .reassign-section button:hover {
                background-color: #0056b3;
            }
</style>



<div class="ticket">
    <!-- Ticket Stub -->
    <div class="ticket-stub">
        <h3 style="color: darkgray;">Ticket</h3>
        <h1>#@Model.Ticket.Id</h1>
    </div>

    <!-- Ticket Body -->
    <div class="ticket-body">
        <div class="detail-item">
            <h3>Customer</h3>
            <p>@Model.Customer</p>
        </div>
        <div class="detail-item">
            <h3>Agent</h3>
            <p>@Model.Agent</p>
        </div>
        <div class="detail-item">
            <h3>Category</h3>
            <p>@Model.Ticket.Category.CategoryName</p>
        </div>
        <div class="detail-item">
            <h3>Priority</h3>
            <p>@Model.Ticket.Priority</p>
        </div>
        <div class="detail-item">
            <h3>Status</h3>
            <p>@Model.Ticket.Status</p>
        </div>
        <div class="detail-item">
            <h3>Time Submitted</h3>
            <p>@Model.Ticket.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</p>
        </div>
        <div class="detail-item">
            <h3>Last Updated</h3>
            <p>@Model.Ticket.UpdatedAt?.ToString("dd MMM yyyy, hh:mm tt")</p>
        </div>

        <button class="send-message-btn">View Details</button>
    </div>
</div>

<!-- Modal -->
<div id="myModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Ticket Description</h2>
        <p>@Model.Ticket.Description</p>

        <h3>Conversation</h3>
        <div class="message-container">
            <!-- Example messages -->
            <div class="message sent">Hey, I need help with my order.</div>
            <div class="message received">Sure! What seems to be the issue?</div>
            <!-- Add more dynamic messages here from the backend -->
        </div>

        @if (User.IsInRole("2"))
        {
            <div class="reassign-section">
                <form asp-action="ReassignTicket" method="post">
                    <label for="agentSelect">Reassign Ticket to Agent:</label>
                    <select id="agentSelect" name="newAgent">
                        @foreach (var agent in Model.Agents)
                        {
                            <option value="@agent.Id">@agent.Username - @agent.Department.DepartmentName</option>
                        }
                    </select>
                    <input type="hidden" name="ticketId" value="@Model.Ticket.Id" />
                    <button type="submit">Reassign</button>
                </form>
            </div>
        }

        <br />

        <div class="input-area">
            <input type="text" id="messageInput" placeholder="Type your message...">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    var modal = document.getElementById("myModal");
    var btn = document.querySelector(".send-message-btn");
    var span = document.getElementsByClassName("close")[0];

    btn.onclick = function () {
        modal.style.display = "block";
    }

    span.onclick = function () {
        modal.style.display = "none";
    }

    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    function sendMessage() {
        var input = document.getElementById("messageInput");
        var message = input.value;
        if (message.trim() !== "") {
            var messageContainer = document.querySelector(".message-container");
            var newMessage = document.createElement("div");
            newMessage.classList.add("message", "sent");
            newMessage.textContent = message;
            messageContainer.appendChild(newMessage);
            input.value = "";
        }
    }
</script>